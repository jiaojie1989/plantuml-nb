/* 
 * The MIT License
 *
 * Copyright 2017 Venkat Ram Akkineni.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.netbeans.modules.plantumlnb.ui.wizard;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;

public final class PlantUMLVisualPanel2 extends JPanel implements GenericDocumentListener,
        Initializable<PlantUMLWizardPanel2>, GenericChangeListener {

    private PlantUMLWizardPanel2 plantUMLWizardPanel2;

    private final List<ChangeListener> listeners = new ArrayList<>();

    /**
     * Creates new form PlantUMLVisualPanel2
     */
    private PlantUMLVisualPanel2() {
        initComponents();
    }

    @Override
    public void init(final PlantUMLWizardPanel2 plantUMLWizardPanel2) {
        this.plantUMLWizardPanel2 = plantUMLWizardPanel2;

        excludePatternTextField.getDocument()
                .addDocumentListener(this);
        includePatternTextField.getDocument()
                .addDocumentListener(this);
    }

    @Override
    public String getName() {
        return "Enter include/exclude patterns";
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        excludePatternsLabel = new javax.swing.JLabel();
        excludePatternTextField = new javax.swing.JTextField();
        includePatternsLabel = new javax.swing.JLabel();
        includePatternTextField = new javax.swing.JTextField();
        helpTextLabel = new javax.swing.JLabel();
        sampleExcludePatternsLabel = new javax.swing.JLabel();
        sampleIncludePatternsLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        excludePatternsLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        excludePatternsLabel.setLabelFor(excludePatternTextField);
        org.openide.awt.Mnemonics.setLocalizedText(excludePatternsLabel, org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.excludePatternsLabel.text")); // NOI18N

        excludePatternTextField.setText(org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.excludePatternTextField.text")); // NOI18N

        includePatternsLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        includePatternsLabel.setLabelFor(includePatternTextField);
        org.openide.awt.Mnemonics.setLocalizedText(includePatternsLabel, org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.includePatternsLabel.text")); // NOI18N

        includePatternTextField.setText(org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.includePatternTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(helpTextLabel, org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.helpTextLabel.text")); // NOI18N
        helpTextLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        sampleExcludePatternsLabel.setFont(new java.awt.Font("Dialog", 2, 11)); // NOI18N
        sampleExcludePatternsLabel.setLabelFor(excludePatternTextField);
        org.openide.awt.Mnemonics.setLocalizedText(sampleExcludePatternsLabel, org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.sampleExcludePatternsLabel.text")); // NOI18N

        sampleIncludePatternsLabel.setFont(new java.awt.Font("Dialog", 2, 11)); // NOI18N
        sampleIncludePatternsLabel.setLabelFor(includePatternTextField);
        org.openide.awt.Mnemonics.setLocalizedText(sampleIncludePatternsLabel, org.openide.util.NbBundle.getMessage(PlantUMLVisualPanel2.class, "PlantUMLVisualPanel2.sampleIncludePatternsLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpTextLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .addComponent(excludePatternTextField)
                    .addComponent(jSeparator1)
                    .addComponent(includePatternTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(excludePatternsLabel)
                            .addComponent(sampleExcludePatternsLabel)
                            .addComponent(includePatternsLabel)
                            .addComponent(sampleIncludePatternsLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(excludePatternsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(excludePatternTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleExcludePatternsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includePatternsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includePatternTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleIncludePatternsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField excludePatternTextField;
    private javax.swing.JLabel excludePatternsLabel;
    private javax.swing.JLabel helpTextLabel;
    private javax.swing.JTextField includePatternTextField;
    private javax.swing.JLabel includePatternsLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel sampleExcludePatternsLabel;
    private javax.swing.JLabel sampleIncludePatternsLabel;
    // End of variables declaration//GEN-END:variables

    public String getIncludePattern() {
        return includePatternTextField.getText();
    }
    
    public String getExcludePattern() {
        return excludePatternTextField.getText();
    }

    @Override
    public ValidatingWizardPanel getValidatingWizardPanel() {
        return plantUMLWizardPanel2;
    }

    public static PlantUMLVisualPanel2 createInstance(final PlantUMLWizardPanel2 plantUMLWizardPanel2) {
        PlantUMLVisualPanel2 plantUMLVisualPanel2 = new PlantUMLVisualPanel2();
        plantUMLVisualPanel2.init(plantUMLWizardPanel2);
        return plantUMLVisualPanel2;
    }

    @Override
    public void updateUI(DocumentEvent e) {
    }

    @Override
    public List<ChangeListener> getChangeListeners() {
        return listeners;
    }
    
}
